# This file is auto-generated from the current state of the database. Instead
# of editing this file, please use the migrations feature of Active Record to
# incrementally modify your database, and then regenerate this schema definition.
#
# Note that this schema.rb definition is the authoritative source for your
# database schema. If you need to create the application database on another
# system, you should be using db:schema:load, not running all the migrations
# from scratch. The latter is a flawed and unsustainable approach (the more migrations
# you'll amass, the slower it'll run and the greater likelihood for issues).
#
# It's strongly recommended that you check this file into your version control system.

ActiveRecord::Schema.define(version: 201309200000000) do

  # These are extensions that must be enabled in order to support this database
  enable_extension "plpgsql"

  create_table "agreements", id: :serial, force: :cascade do |t|
    t.integer "user_id"
    t.integer "group_id"
    t.datetime "created_at"
    t.datetime "updated_at"
    t.datetime "approved"
  end

  create_table "books", id: :serial, force: :cascade do |t|
    t.string "title"
    t.text "blurb"
    t.date "releasedate"
    t.integer "author_id"
    t.string "genre"
    t.string "fiftychar"
    t.float "price"
    t.string "bookpdf"
    t.string "coverpic"
    t.string "coverpicurl"
    t.datetime "created_at"
    t.datetime "updated_at"
    t.integer "user_id"
    t.string "bookmobi"
    t.string "bookepub"
    t.string "bookkobo"
    t.string "bookaudio"
    t.text "youtube1"
    t.text "youtube2"
    t.string "bkvideodesc1"
    t.string "bkvideodesc2"
  end

  create_table "events", id: :serial, force: :cascade do |t|
    t.string "name" #name of event
    t.datetime "start_at"#when event starts
    t.datetime "end_at"#when event ends
    t.datetime "created_at" #when was the event created
    t.datetime "updated_at" #when the event was last updated
    t.text "desc" #description of event
    t.string "address" #street address of the event
    t.integer "user_id" #id number of the user
    t.float "latitude"
    t.float "longitude"
    t.integer "group1id" #select up to 3 groups to add your event to their calendars
    t.integer "group2id"
    t.integer "group3id"
    t.integer "usrid" #current userid value
  end

  create_table "friendly_id_slugs", id: :serial, force: :cascade do |t|
    t.string "slug", null: false
    t.integer "sluggable_id", null: false
    t.string "sluggable_type", limit: 50
    t.string "scope"
    t.datetime "created_at"
    t.index ["slug", "sluggable_type", "scope"], name: "index_friendly_id_slugs_on_slug_and_sluggable_type_and_scope", unique: true
    t.index ["slug", "sluggable_type"], name: "index_friendly_id_slugs_on_slug_and_sluggable_type"
    t.index ["sluggable_id"], name: "index_friendly_id_slugs_on_sluggable_id"
    t.index ["sluggable_type"], name: "index_friendly_id_slugs_on_sluggable_type"
  end

  create_table "groups", id: :serial, force: :cascade do |t|
    t.string "name" #name of group/organization
    t.string "address" #
    t.float "latitude"
    t.float "longitude"
    t.integer "user_id"
    t.text "about"
    t.string "grouppic"
    t.datetime "created_at"
    t.datetime "updated_at"
    t.string "grouptype"
    t.string "permalink"
    t.string "slug"
    t.string "newsurl"
    t.string "twitter"
    t.string "facebook"
    t.text "callaction"
    t.string "stripeid"
    t.string "stripe_customer_token"
    t.datetime "stripesignup"
    t.index ["slug"], name: "index_groups_on_slug", unique: true
  end

  create_table "merchandises", id: :serial, force: :cascade do |t|
    t.string "name" #name of the merchandise\perk
    t.integer "user_id" #the unique user ID 
    t.float "price" #price of item
    t.text "desc" #description of the item/perk
    t.string "itempic" #picture of the perk
    t.datetime "created_at" #time/date of when the perk was created
    t.datetime "updated_at" #time/date of when it was updated
    t.datetime "deadline" #when the merchandise needs to be funded/bought by
    t.float "goal" #amount of money wanted 
    t.string "youtube" #youtube link
    t.string "audio" #downloadable song or podcast
    t.string "video" #video file name
    t.string "graphic" #name of graphic
    t.string "merchepub" #one format of book
    t.string "merchmobi" #another format of book
    t.string "merchpdf" #PDF of the merch
    t.datetime "expiration" #date/time of the expiration of the sales record
    t.integer "itempic_crop_x"
    t.integer "itempic_crop_y"
    t.integer "itempic_crop_w"
    t.integer "itempic_crop_h"
    t.string "buttontype" #what kind of button EX:Buy
  end

  create_table "movieroles", force: :cascade do |t|
    t.string "role"
    t.string "roledesc"
    t.integer "user_id"
    t.integer "movie_id"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
  end

  create_table "movies", force: :cascade do |t|
    t.string "title"
    t.text "about"
    t.string "youtube1"
    t.string "youtube2"
    t.string "youtube3"
    t.string "videodesc1"
    t.string "videodesc2"
    t.string "videodesc3"
    t.string "moviepic"
    t.string "genre"
    t.float "price"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.integer "user_id"
    t.string "director"
    t.date "releasedate"
  end

  create_table "phases", id: :serial, force: :cascade do |t|
    t.string "name"
    t.integer "user_id"
    t.text "mission"
    t.string "phasepic"
    t.datetime "created_at"
    t.datetime "updated_at"
    t.string "permalink"
    t.string "slug"
    t.datetime "deadline"
    t.string "why_classy"
    t.string "youtube"
    t.index ["slug"], name: "index_phases_on_slug", unique: true
  end

  create_table "purchases", id: :serial, force: :cascade do |t|
    t.integer "author_id" #the id of purchase
    t.integer "book_id" #not used
    t.string "stripe_customer_token" 
    t.integer "plan_id"
    t.datetime "created_at" #date when the purchase was created
    t.datetime "updated_at" #date when the purchase was updated
    t.string "stripe_card_token" #token tied to the card used with stripe
    t.integer "user_id" #id value of the user who purchased something
    t.string "bookfiletype"
    t.float "pricesold" #price paid for the item
    t.decimal "authorcut", precision: 8, scale: 2  #amount of money the author gets for selling on this website
    t.date "paid"
    t.integer "merchandise_id" #ID of the merchandise sold
    t.integer "group_id"
    t.decimal "groupcut", precision: 8, scale: 2 #how much money the org gets
    t.string "shipaddress" #full shipping address
    t.string "fulfillstatus" #if the order has been fulfilled
    t.string "email"#email used to verify
  end

  create_table "relationships", force: :cascade do |t|
    t.integer "follower_id"
    t.integer "followed_id"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["followed_id"], name: "index_relationships_on_followed_id"
    t.index ["follower_id", "followed_id"], name: "index_relationships_on_follower_id_and_followed_id", unique: true
    t.index ["follower_id"], name: "index_relationships_on_follower_id"
  end

  create_table "reviews", id: :serial, force: :cascade do |t|
    t.text "blurb"
    t.integer "user_id"
    t.integer "book_id"
    t.integer "star"
    t.datetime "created_at"
    t.datetime "updated_at"
  end

  create_table "rsvpqs", id: :serial, force: :cascade do |t|
    t.integer "event_id" #event rsvp'd for
    t.integer "user_id" #username
    t.integer "guests"#number of guests
    t.datetime "created_at"#when was the rsvp created
    t.datetime "updated_at" #when was it updated
    t.string "email" #email of the person who rsvp'd
  end

  create_table "users", id: :serial, force: :cascade do |t|
    t.string "name" #name of user
    t.string "email" #email address
    t.text "ustreamvid" #not used
    t.text "ustreamsocial" #not used
    t.string "twitter" # user's twitter handle
    t.string "facebook" #user's facebook link
    t.string "pinterest" #user's pinterest link
    t.string "youtube" #user's youtube link
    t.string "genre1" #Category of discussion topics
    t.string "genre2" # subcategory of discussion topics
    t.string "genre3" # another subcategory for discussion dopics
    t.string "blogurl" #url for website
    t.string "profilepicurl"
    t.string "profilepic"
    t.string "author" #kind of user
    t.text "about" #about the book
    t.string "password_digest" #hashed information of how to access the password records only usable by the site
    t.string "remember_token" #used by the framework to prevent against "remember me hijacking"
    t.datetime "created_at" #when the user was created
    t.datetime "updated_at" #when the information from the user was updated
    t.string "encrypted_password", default: "", null: false #user's encrypted password 
    t.string "reset_password_token" #Token created so that the user can reset password if the password is not remembered
    t.datetime "reset_password_sent_at" #time the password reset was sent
    t.datetime "remember_created_at" #used to prevent changes in created_at
    t.integer "sign_in_count", default: 0 #number of times user signed in
    t.datetime "current_sign_in_at" #when the user currently signed in
    t.datetime "last_sign_in_at" #datetime when the user last signed in
    t.string "current_sign_in_ip" #IP from the current sign in
    t.string "last_sign_in_ip" #IP from the last sign in
    t.string "permalink" #permanent link to user page
    t.string "address" 
    t.float "latitude" #not used
    t.float "longitude" #not used
    t.string "slug" #humanreadable URL
    t.text "youtube1"#these are 3 youtube videos you can post
    t.text "youtube2"
    t.text "youtube3"
    t.string "videodesc1" #corresponding descriptions to those videos
    t.string "videodesc2"
    t.string "videodesc3"
    t.string "blogradio" 
    t.text "blogtalkradio"
    t.string "stripeid" 
    t.string "stripe_customer_token"
    t.datetime "stripesignup"
    t.string "bannerpic"
    t.index ["email"], name: "index_users_on_email", unique: true #for all index fields, it ensures only 1 copy of this information can be made
    t.index ["permalink"], name: "index_users_on_permalink", unique: true #index of the name on the table
    t.index ["remember_token"], name: "index_users_on_remember_token" #index of the token used for remember me
    t.index ["reset_password_token"], name: "index_users_on_reset_password_token", unique: true 
    t.index ["slug"], name: "index_users_on_slug", unique: true
  end

end
